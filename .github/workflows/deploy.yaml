name: Deploy Changed Services Only

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) AWS 자격증명 설정 (Secrets.AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION 필요)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 2) ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3) FastAPI 이미지 빌드 & 푸시
      - name: Build and push FastAPI image
        if: github.event_name == 'push' && (contains(github.event.head_commit.message, 'fastapi') || contains(join(github.event.commits.*.modified, '\n'), 'fastapi/') || contains(join(github.event.commits.*.added, '\n'), 'fastapi/'))
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi
          file: ./fastapi/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/byhyeon:fastapi-latest

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          eval "$(ssh-agent -s)"
          ssh-add id_rsa
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Step 1 - Git Pull & Set KUBECONFIG & Create ECR Secret
      #   run: |
      #     ssh -i id_rsa -p 2222 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
      #     set -e
      #     cd ~/byhyeon
      #     git pull origin main

      #     echo '📁 KUBECONFIG 권한 유지하면서 ~/.kube/config 세팅'
      #     mkdir -p ~/.kube
      #     sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
      #     sudo chown $(whoami) ~/.kube/config
      #     chmod 600 ~/.kube/config

      #     echo '🔐 ECR Secret 생성 - 무조건 갱신'
      #     aws ecr get-login-password --region ap-northeast-2 | \
      #     kubectl create secret docker-registry ecr-registry \
      #       --docker-server=329599615061.dkr.ecr.ap-northeast-2.amazonaws.com \
      #       --docker-username=AWS \
      #       --docker-password=$(aws ecr get-login-password) \
      #       --namespace=default \
      #       --dry-run=client -o yaml | kubectl apply -f -
      #     EOF

      - name: FastAPI + Monitoring Helm 배포
        run: |
          ssh -i id_rsa -p 2222 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
          set -e
          cd ~/byhyeon

          echo '📥 Git Pull'
          git pull origin main

          CHANGED_FILES=$(git diff --name-only HEAD@{1} HEAD)

          echo "🔍 변경된 파일 목록:"
          if [ -n "\$CHANGED_FILES" ]; then
            printf "%s\n" "\$CHANGED_FILES"
          else
            echo "(no changed files)"
          fi

          # FastAPI 변경 감지
          if echo "\$CHANGED_FILES" | grep -qE '(^|/)(helm/fastapi-chart/|fastapi/)'; then
            echo '🚀 FastAPI Helm 차트 변경 감지 → helm upgrade 실행'
            helm upgrade --install fastapi ./helm/fastapi-chart -n fastapi --create-namespace -f ./helm/fastapi-chart/values.yaml --create-namespace
            echo '🔄 FastAPI Deployment rollout 강제 재시작'
            kubectl rollout restart deployment fastapi -n fastapi
            echo '✅ FastAPI 재배포 완료'
          else
            echo 'ℹ️ FastAPI 관련 변경사항 없음'
          fi

          # Monitoring (Prometheus) 변경 감지
          if echo "\$CHANGED_FILES" | grep -qE '(^|/)helm/monitoring/prometheus/'; then
            echo '🚀 Prometheus Helm 차트 변경 감지 → helm upgrade 실행'
            helm upgrade --install prometheus ./helm/monitoring/prometheus -n monitoring --create-namespace -f ./helm/monitoring/prometheus/values.yaml
          else
            echo 'ℹ️ Prometheus 관련 변경사항 없음'
          fi

          # Monitoring (Grafana) 변경 감지
          if echo "\$CHANGED_FILES" | grep -qE '(^|/)helm/monitoring/grafana/'; then
            echo '🚀 Grafana Helm 차트 변경 감지 → helm upgrade 실행'
            helm upgrade --install grafana ./helm/monitoring/grafana -n monitoring --create-namespace -f ./helm/monitoring/grafana/values.yaml
          else
            echo 'ℹ️ Grafana 관련 변경사항 없음'
          fi

          EOF

#####################변경전 deploy 
      # - name: Deploy changed services
      #   run: |
      #     chmod 600 id_rsa
      #     ssh -i id_rsa -p 2222 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
      #     set -e
      #     mkdir -p ~/byhyeon && cd ~/byhyeon
      #     git pull origin main

      #     echo '🔐 ECR Secret 무조건 갱신'
      #     aws ecr get-login-password --region ap-northeast-2 | \
      #     kubectl create secret docker-registry ecr-registry \
      #       --docker-server=329599615061.dkr.ecr.ap-northeast-2.amazonaws.com \
      #       --docker-username=AWS \
      #       --docker-password=$(aws ecr get-login-password) \
      #       --namespace=default \
      #       --dry-run=client -o yaml | kubectl apply -f -

      #     # 안전하게 현재 커밋 기준으로만 변경된 파일 확인
      #     CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)

      #     echo "🔄 변경된 파일 목록:"
      #     echo "$CHANGED_FILES" | sed '/^$/d' | sed 's/^/📁 /'

      #     if echo "$CHANGED_FILES" | grep -qE '^helm/fastapi-chart/|^fastapi/'; then
      #       echo '🚀 FastAPI Helm 차트 변경 감지 → helm upgrade 실행'
      #       helm upgrade --install fastapi ./helm/fastapi-chart -n default
      #     fi

      #     if echo "\$CHANGED_FILES" | grep -qE '^airflow/|docker-compose-airflow.yaml'; then
      #       echo '▶️ Airflow 변경 감지 → 재빌드 및 재시작'
      #       docker compose -f docker-compose-airflow.yaml up --build --force-recreate -d airflow-webserver airflow-scheduler
      #     fi

      #     if echo "\$CHANGED_FILES" | grep -qE '^monitoring/|docker-compose-monitoring.yaml'; then
      #       echo '▶️ Monitoring 변경 감지 → 재빌드 및 재시작'
      #       docker compose -f docker-compose-monitoring.yaml up --build --force-recreate -d grafana prometheus cadvisor
      #     fi
          
      #     if echo "$CHANGED_FILES" | grep -qE '^filebeat/|^docker-compose-elk.yaml$'; then
      #       echo '📦 ELK 변경 감지 → 재시작'
      #       docker compose -f docker-compose-elk.yaml up --force-recreate -d elasticsearch kibana filebeat
      #     fi
      #     EOF
      #   env:
      #     PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     SSH_USER: ${{ secrets.SSH_USER }}
      #     SERVER_IP: ${{ secrets.SERVER_IP }}

      - name: Cleanup SSH Key
        run: rm -f id_rsa
