name: Deploy Changed Services Only

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) AWS 자격증명 설정 (Secrets.AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION 필요)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 2) ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3) ecr-token-refresher 이미지 빌드 & 푸시
      - name: Build and push ecr-token-refresher image
        if: contains(join(github.event.commits.*.modified, '\n'), 'cronjob/ecr-token-refresher/Dockerfile')
        uses: docker/build-push-action@v5
        with:
          context: ./cronjob/ecr-token-refresher
          file: ./cronjob/ecr-token-refresher/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/ecr-token-refresher:latest

      # 4) FastAPI 이미지 빌드 & 푸시
      - name: Build and push FastAPI image
        if: contains(join(github.event.commits.*.modified, '\n'), 'fastapi/Dockerfile')
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi
          file: ./fastapi/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/byhyeon:fastapi-latest

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          eval "$(ssh-agent -s)"
          ssh-add id_rsa
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: List chart path before packaging
        run: ls -R helm/cronjob/ecr-token-refresher

      - name: Helm Package Charts
        run: |
          mkdir -p packaged
          echo "📦 Packaging cadvisor"
          helm package helm/monitoring/cadvisor -d packaged/
          echo "📦 Packaging cronjob"
          helm package helm/cronjob/ecr-token-refresher -d packaged/
          echo "📦 Packaging fastapi"
          helm package helm/fastapi-chart -d packaged/
          echo "📦 Packaging prometheus"
          helm package helm/monitoring/prometheus -d packaged/
          echo "📦 Packaging grafana"
          helm package helm/monitoring/grafana -d packaged/

      - name: Upload Packaged Charts to Server
        run: |
          echo '📤 Uploading packaged charts to server'
          rsync -avz --delete -e "ssh -i id_rsa -p 2222" packaged/ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/byhyeon/helm/
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}

      - name: Helm Upgrade Deploy
        run: |
          echo "🚀 Deploying all charts"
          ssh -i id_rsa -p 2222 -o StrictHostKeyChecking=no "$SSH_USER@$SERVER_IP" << EOF
            set -e
            cd ~/byhyeon/helm

            echo "🚀 Deploying cadvisor"
            helm upgrade --install cadvisor ./cadvisor-*.tgz -n monitoring --create-namespace

            echo "🚀 Deploying node-exporter"
            helm upgrade --install node-exporter ./monitoring/node-exporter -n monitoring --create-namespace

            echo "🚀 Deploying ecr-token-refresher"
            helm upgrade --install ecr-token-refresher ./ecr-token-refresher-*.tgz -n kube-system --create-namespace

            echo "🚀 Deploying fastapi"
            helm upgrade --install fastapi ./fastapi-*.tgz -n fastapi --create-namespace
            kubectl rollout restart deployment fastapi -n fastapi

            echo "🚀 Deploying prometheus"
            helm upgrade --install prometheus ./prometheus-*.tgz -n monitoring --create-namespace

            echo "🚀 Deploying grafana"
            helm upgrade --install grafana ./grafana-*.tgz -n monitoring --create-namespace
          EOF
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}

      - name: Cleanup SSH Key
        run: rm -f id_rsa
